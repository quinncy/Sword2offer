
bool HasSubTree(BinaryTreeNode * pRoot1, BinaryTreeNode * pRoot2)
{
	bool result = false;
	
	if(pRoot1 != NULL && pRoot2 != NULL)
	{
		if(pRoot1 -> m_nValue == pRoot2 -> m_nValue)
			result = DoesT1HasT2(pRoot1, pRoot2);
		
		if(!result)
			result = HasSubTree(pRoot1 -> m_pLeft, pRoot2);
			
		if(!result)
			result = HasSubTree(pRoot1 -> m_pRight, pRoot2);
	}
	
	return result;
}

bool DoesT1HasT2(BinaryTreeNode * pRoot1, BinaryTreeNode * pRoot2)
{
	if(pRoot2 == NULL)
		return true;
	
	if(pRoot1 == NULL)
		return false;
		
	if(pRoot1 -> m_nValue != pRoot2 -> m_nValue)
		return false;
		
	return DoesT1HasT2(pRoot1 -> m_pLeft, pRoot2 -> m_pLeft) && DoesT1HasT2(pRoot1 -> m_pRight, pRoot2 -> m_pRight);
}