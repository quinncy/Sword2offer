
void FindPath(BinaryTreeNode * pRoot, int expectedSum)
{
		if(pRoot == NULL)
			return;
			
		std:: vector<int> path;
		
		int currentSum = 0;
		FindPath(pRoot, expectedSum, path, currentSum);
}

void FindPath(BinaryTreeNode * pRoot, int expectedSum, std::vector<int> & path, int & currentSum)
{
	currentSum += pRoot -> m_nValue;
	path.push_back(pRoot -> m_nValue);
	
	//如果是叶节点，且和等于整数，打印这条路径
	bool isLeaf = pRoot -> m_pLeft == NULL && pRoot -> m_pRight == NULL;
	if(currentSum == expectedSum && isLeaf)
	{
		printf();
		std::vector<int>::iterator iter = path.begin();
		for(; iter != path.end(); iter++)
		{
			printf(*iter);
		}
	}
	
	
	//如果不是叶节点，则遍历他的子节点
	if(pRoot -> m_pLeft != NULL)
		FindPath(pRoot -> m_pLeft, expectedSum, path, currentSum);
		
	if(pRoot -> m_pRight != NULL)
		FindPath(pRoot -> m_pRight, expectedSum, path, currentSum);
		
	//如果不等于整数，那么就要返回上一个结点，并且删除当前结点的值
	currentSum -= pRoot -> m_nValue;
	path.pop_back();
}