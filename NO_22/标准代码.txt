
bool isPopOrder(const int* pPush, const int * pPop, int nLength)
{
	bool bPossible = false;
	
	if(pPush != NULL && pPop != NULL && nLength > 0)
	{
		int * pNextPush = pPush;
		int * pNextPop = pPop;
		
		stack stackData;
		
		while(pNextPop - pPop < nLength)//当辅助栈序列长度小于总长度
		{
			while(stackData.empty() || stackData.top() != *pNextPop)
			{
				if(pNextPush - pPush == nLength)
					break;
					
				stackData.push(*pNextPush);
				pNextPush++;
			}
			
			if(stackData.top() != *pNextPop)
				break;
			
			stackData.pop();
			pNextPop++;
		}
		
		if(stackData.empty() && pNextPop - pPop == nLength)
			bPossible = true;
			
	}
	
	return bPossible;
}